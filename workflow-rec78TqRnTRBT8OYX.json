{"name":"[n8n] YouTube Channel Advanced RSS Feeds Generator","nodes":[{"parameters":{"path":"Youtube","formTitle":"Youtube RSS Generator","formDescription":"=Youtube Username Example: @username\n\nYoutube ID Example: UCxxxxxxxxxxxxxxxxxx\n\nYoutube Video URL Example 1: https://www.youtube.com/watch?v=mn-br82ENxc\n\nYoutube Video URL Example 2: https://youtu.be/mn-br82ENxc\n\nYoutube Channel URL Example 1: https://www.youtube.com/@NewMedia_Life\n\nYoutube Channel URL Example 2: https://www.youtube.com/channel/UC_UDAiqQj-QfgTixKkW51qA","formFields":{"values":[{"fieldLabel":"youtube Channel username or ID","requiredField":true}]},"responseMode":"responseNode","options":{}},"name":"n8n Form Trigger","type":"n8n-nodes-base.formTrigger","typeVersion":2,"position":[-300,-260],"webhookId":"68a70315-9f74-4cf5-9c68-828396b0f23b"},{"parameters":{"url":"https://commentpicker.com/actions/youtube-channel-id.php","sendQuery":true,"queryParameters":{"parameters":[{"name":"url","value":"=https://www.googleapis.com/youtube/v3/channels?part=id,snippet,statistics,contentDetails,status&forHandle={{ $item(\"0\").$node[\"Set Channel Username\"].json[\"channel name\"] }}"},{"name":"token","value":"={{ $item(\"0\").$node[\"Get Temporary Token\"].json[\"data\"] }}"},{"name":"isPremium","value":"false"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"authority","value":"commentpicker.com"},{"name":"cookie","value":"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; ezoab_186623=mod99-c; active_template::186623=pub_site.1711138973; lp_186623=https://commentpicker.com/youtube-channel-id.php; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg"},{"name":"referer","value":"https://commentpicker.com/youtube-channel-id.php"},{"name":"user-agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"}]},"options":{"response":{"response":{"responseFormat":"json"}}}},"name":"Get Channel ID","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[700,-440],"notesInFlow":true,"notes":"3rd party API request"},{"parameters":{"assignments":{"assignments":[{"id":"bf0ea151-e325-4860-af02-76e51f692f2c","name":"rss","value":"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $json.items[0].id }}","type":"string"}]},"options":{}},"name":"Set XML URL","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[900,-440],"notesInFlow":true,"notes":"🤖Generate XML Feed URL"},{"parameters":{"assignments":{"assignments":[{"id":"0837a847-4c6b-4b39-bb90-f200233bf7e1","name":"channel name","value":"={{ $item(\"0\").$node[\"Switch\"].json[\"value\"] }}","type":"string"}]},"options":{}},"name":"Set Channel Username","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[520,-440]},{"parameters":{"assignments":{"assignments":[{"id":"bf0ea151-e325-4860-af02-76e51f692f2c","name":"rss","value":"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $item(\"0\").$node[\"Switch\"].json[\"value\"] }}","type":"string"}]},"options":{}},"name":"Set XML Feed URL","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[900,-260],"notesInFlow":true,"notes":"🤖Generate XML Feed URL"},{"parameters":{"assignments":{"assignments":[{"id":"0837a847-4c6b-4b39-bb90-f200233bf7e1","name":"Video ID","value":"={{ $item(\"0\").$node[\"Switch\"].json[\"value\"] }}","type":"string"}]},"options":{}},"name":"Set Video ID","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[520,-80]},{"parameters":{"url":"https://commentpicker.com/actions/youtube-channel-id.php","sendQuery":true,"queryParameters":{"parameters":[{"name":"url","value":"=https://www.googleapis.com/youtube/v3/videos?part=snippet&id={{ $json[\"Video ID\"] }}"},{"name":"token","value":"={{ $item(\"0\").$node[\"GTT\"].json[\"data\"] }}"},{"name":"isPremium","value":"true"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"authority","value":"commentpicker.com"},{"name":"cookie","value":"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; ezoab_186623=mod99-c; active_template::186623=pub_site.1711138973; lp_186623=https://commentpicker.com/youtube-channel-id.php; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg"},{"name":"referer","value":"https://commentpicker.com/youtube-channel-id.php"},{"name":"user-agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"}]},"options":{"response":{"response":{"responseFormat":"json"}}}},"name":"Get Video ID Channel ID","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[700,-80],"notesInFlow":true,"notes":"3rd party API request"},{"parameters":{"assignments":{"assignments":[{"id":"bf0ea151-e325-4860-af02-76e51f692f2c","name":"rss","value":"=https://www.youtube.com/feeds/videos.xml?channel_id={{ $item(\"0\").$node[\"Get Video ID Channel ID\"].json[\"items\"][\"0\"][\"snippet\"][\"channelId\"] }}","type":"string"}]},"options":{}},"name":"Set XML Feed","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[900,-80],"notesInFlow":true,"notes":"🤖Generate XML Feed URL"},{"parameters":{"url":"https://commentpicker.com/actions/token.php","sendHeaders":true,"headerParameters":{"parameters":[{"name":"authority","value":"commentpicker.com"},{"name":"cookie","value":"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg; ezoab_186623=mod54-c; active_template::186623=pub_site.1711191989"},{"name":"referer","value":"https://commentpicker.com/youtube-channel-id.php"},{"name":"user-agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"}]},"options":{}},"name":"Get Temporary Token","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[320,-440],"notesInFlow":true,"notes":"3rd party API request"},{"parameters":{"url":"https://commentpicker.com/actions/token.php","sendHeaders":true,"headerParameters":{"parameters":[{"name":"authority","value":"commentpicker.com"},{"name":"cookie","value":"ezosuibasgeneris-1=690da322-c7c8-44e2-6154-8591a44d12aa; fontsLoaded=true; PHPSESSID=12ltjv3rr293h943c8h35nh3cg; ezoab_186623=mod54-c; active_template::186623=pub_site.1711191989"},{"name":"referer","value":"https://commentpicker.com/youtube-channel-id.php"},{"name":"user-agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"}]},"options":{}},"name":"GTT","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[320,-80],"notesInFlow":true,"notes":"3rd party API request"},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"rss","renameField":true,"outputFieldName":"rss url"}]},"options":{}},"name":"Aggregate","type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[1080,-260],"notesInFlow":true,"notes":"🤖Combine results in one"},{"parameters":{"assignments":{"assignments":[{"id":"6af1de72-9940-4843-9a98-94e36b2878a3","name":"=📹Videos - HTML","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Html","type":"string"},{"id":"2b486723-1dff-4525-8169-6d977dee6862","name":"📹Videos - ATOM","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Atom","type":"string"},{"id":"10b3c04a-2c8c-4533-944b-13123bd22743","name":"📹Videos - JSON","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Json","type":"string"},{"id":"ee8910de-76ab-47a3-b23f-1a1e837fb885","name":"📹Videos - MRSS","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Mrss","type":"string"},{"id":"8684437c-11f0-4cc2-b9b2-00ecb6768175","name":"📹Videos - TEXT","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Plaintext","type":"string"},{"id":"a53d1d0a-bfd1-41f4-9ab3-edd1e20adaa2","name":"📹Videos - SFEED","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YoutubeBridge&context=By+channel+id&c={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&duration_min=&duration_max=&format=Sfeed","type":"string"},{"id":"d17fd2e0-0e4a-45c9-bc60-86ca6a7940d4","name":"📹Videos RT - XML","value":"={{ $json[\"rss url\"][\"0\"] }}","type":"string"}]},"options":{}},"name":"Youtube Channel Videos RSS Formats","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[1260,-180],"notesInFlow":true,"notes":"RSS Feed for channel Posts"},{"parameters":{"assignments":{"assignments":[{"id":"6af1de72-9940-4843-9a98-94e36b2878a3","name":"=👥Community - HTML","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=HTML","type":"string"},{"id":"2b486723-1dff-4525-8169-6d977dee6862","name":"👥Community - ATOM","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Atom","type":"string"},{"id":"10b3c04a-2c8c-4533-944b-13123bd22743","name":"👥Community - JSON","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Json","type":"string"},{"id":"ee8910de-76ab-47a3-b23f-1a1e837fb885","name":"👥Community - MRSS","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Mrss","type":"string"},{"id":"8684437c-11f0-4cc2-b9b2-00ecb6768175","name":"👥Community - TEXT","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Plaintext","type":"string"},{"id":"a53d1d0a-bfd1-41f4-9ab3-edd1e20adaa2","name":"👥Community - SFEED","value":"=https://rss-bridge.org/bridge01/?action=display&bridge=YouTubeCommunityTabBridge&context=By+channel+ID&channel={{ $item(\"0\").$node[\"Aggregate\"].json[\"rss url\"][\"0\"].match(/channel_id=([^&?/]+)/)[1] }}&format=Sfeed","type":"string"}]},"options":{}},"name":"Youtube Channel Community RSS Formats","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[1260,-400],"notesInFlow":true,"notes":"RSS Feed for channel Posts"},{"parameters":{"respondWith":"text","responseBody":"={{ $json[\"html\"] }}","options":{}},"name":"Respond to Webhook","type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[1900,-280],"notesInFlow":true,"notes":"Reply to the webhook request with table"},{"parameters":{"content":"## ℹ️ **Workarounds And Information**\n\n### - **No need to acquire Google Cloud API** to retrieve channel data. I have implemented a free workaround method.\n### - The workflow code has been **tested and proven to work** with all YouTube methods, whether for videos or channels. Regardless of whether you input URLs or usernames, the result will always be the channel ID.\n### - Please be aware that the provided workarounds may become **obsolete or non-functional** in the future. I will ensure to stay updated; however, if this workflow does not work for you, please reach out to me on the n8n community.\n### - We have utilized a 3rd party method to generate **multiple syntaxes of RSS feeds** as outlined below. (*The mentioned source is also capable of constructing multi-channel YouTube RSS feeds*, which I will create later for BULK channel RSS.)","height":200.24482670360715,"width":2425.409405354546,"color":7},"name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-360,140]},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"leftValue":"={{ $json.type }}","rightValue":"channel username","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Username"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"5af4921b-6266-436a-901c-ab52de68aaf4","leftValue":"={{ $json.type }}","rightValue":"=channel ID","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Direct"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict"},"conditions":[{"id":"a5baa5e6-879f-484a-b521-af802b6d79a9","leftValue":"={{ $json.type }}","rightValue":"=video ID","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Video-ID"}]},"options":{}},"name":"Switch","type":"n8n-nodes-base.switch","typeVersion":3,"position":[60,-260]},{"parameters":{"content":"## 🌐 **Generate RSS Feeds for Public Youtube Channel (No API Or Administrator permissions Required 😉)**\n**``Yes, As you heard``** This Workflow using `3rd party` APIs & Solutions to get the job done. **``no need to setup anything``.**\n\n## Workflow Steps:\n- Run **`Test Workflow`**.\n- Enter Channel or Video URL or ID or Username.\n- Finally, the result will provide **``13 URLs (6x Community + 6x Videos + 1 XML)``**:\n  - 6 Formats Types is: `ATOM`, `JSON`, `MRSS`, `PLAINTEXT`, `SFEED`\n  - The **``13th URL``** is from YouTube Directly that contain XML file data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[![N8N Creator Profile](https://cdn.statically.io/gh/Automations-Project/n8n-templates/main/stats.min.svg)](https://n8n.io/creators/nskha)","height":644.5128280596109,"width":2429.6732915601406,"color":3},"name":"Sticky Note","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-360,-520]},{"parameters":{"jsCode":"// JavaScript code to extract YouTube channel ID, username, or video ID from a given input and return in n8n compatible format\n\n// Initialize an array to hold the output items\nconst items = [];\n\n// Extract the input value from the previous node's output using the $input API\nconst inputData = $input.all(); // Get all input data\n// Assuming 'youtube Channel username or ID' is the correct key, and it's in the first input item\nconst input = inputData.length > 0 ? inputData[0].json[\"youtube Channel username or ID\"] : null;\n\n// Check if input exists\nif (!input) {\n    throw new Error('Input is undefined or not provided');\n}\n\n// Regular expressions for different YouTube URL and input formats\nconst usernamePattern = /^@?([a-zA-Z0-9_-]+)$/;\nconst channelIdPattern = /^(UC[a-zA-Z0-9_-]{22})$/; // Ensure channel ID starts with \"UC\"\nconst videoUrlPattern1 = /(?:https?:\\/\\/)?www\\.youtube\\.com\\/watch\\?v=([a-zA-Z0-9_-]+)/;\nconst videoUrlPattern2 = /(?:https?:\\/\\/)?youtu\\.be\\/([a-zA-Z0-9_-]+)/;\nconst channelUrlPattern1 = /(?:https?:\\/\\/)?www\\.youtube\\.com\\/@([a-zA-Z0-9_-]+)/;\nconst channelUrlPattern2 = /(?:https?:\\/\\/)?www\\.youtube\\.com\\/channel\\/(UC[a-zA-Z0-9_-]{22})/;\nconst customChannelUrlPattern = /(?:https?:\\/\\/)?www\\.youtube\\.com\\/c\\/([a-zA-Z0-9_-]+)/; // Pattern for custom channel URLs\n\n// Function to determine the type and value of the input\nfunction determineTypeAndValue(input) {\n    if (channelIdPattern.test(input)) {\n        return { type: 'channel ID', value: input };\n    } else if (usernamePattern.test(input)) {\n        return { type: 'channel username', value: input };\n    } else if (videoUrlPattern1.test(input) || videoUrlPattern2.test(input)) {\n        const videoId = videoUrlPattern1.test(input) ? input.match(videoUrlPattern1)[1] : input.match(videoUrlPattern2)[1];\n        return { type: 'video ID', value: videoId };\n    } else if (channelUrlPattern1.test(input) || customChannelUrlPattern.test(input)) {\n        const username = channelUrlPattern1.test(input) ? input.match(channelUrlPattern1)[1] : input.match(customChannelUrlPattern)[1];\n        return { type: 'channel username', value: username };\n    } else if (channelUrlPattern2.test(input)) {\n        return { type: 'channel ID', value: input.match(channelUrlPattern2)[1] };\n    } else {\n        return { error: 'Invalid input or unsupported format.' };\n    }\n}\n\n// Process the input and add the result to the items array\nconst result = determineTypeAndValue(input);\nitems.push({ json: result });\n\nreturn items; // Return the array of items\n"},"name":"Validation Code","type":"n8n-nodes-base.code","typeVersion":2,"position":[-120,-260],"notesInFlow":true,"notes":"🤓Validate the YouTube input"},{"parameters":{"jsCode":"// Assuming inputData is dynamically retrieved as follows\nconst inputData = $item(\"0\").$node[\"Merga Data of Youtube & Community RSS\"].json;\n\n// Initialize HTML with a modern styled table using Bootstrap\nlet html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>RSS Table</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\n    <style>\n      body {\n        margin: 0;\n        background: linear-gradient(135deg, #1d1d1d, #3d3d3d);\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        color: #fff;\n        display: ruby-text;\n        justify-content: center;\n        align-items: center;\n        min-height: 100vh;\n      }\n      .table-container {\n        width: 90%;\n        max-width: 1200px;\n        margin: 20px auto;\n        background-color: #2c2c2c;\n        border-radius: 10px;\n        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n        overflow-x: auto;\n      }\n      .icon {\n        width: 16px;\n        height: 16px;\n        margin-right: 8px;\n        vertical-align: middle;\n      }\n      .type-format {\n        display: ruby-text;\n        align-items: center;\n        min-width: 158px;\n      }\n      .url-box {\n        display: inline-block;\n        background-color: #444;\n        padding: 6px 12px;\n        border-radius: 4px;\n        border: 1px solid #666;\n        cursor: pointer;\n        color: #ddd;\n        word-break: break-all;\n      }\n      .url-box:hover {\n        background-color: #555;\n      }\n      .thead-dark th {\n        background: linear-gradient(135deg, #ff6b6b, #ff4757);\n        border-color: #444;\n        color: #fff;\n      }\n      .table-striped tbody tr:nth-of-type(odd) {\n        background-color: #2a2a2a;\n      }\n      .table-hover tbody tr:hover {\n        background-color: #383838;\n      }\n      @media (max-width: 768px) {\n        .table-container table th,\n        .table-container table td {\n          white-space: nowrap;\n        }\n      }\n      .xtd {\n    text-align: center;\n    align-content: center;\n    align-items: center;\n}\n    </style>\n    <script>\n      function copyToClipboard(text) {\n        if (navigator.clipboard && navigator.clipboard.writeText) {\n          navigator.clipboard.writeText(text).then(() => {\n            alert('Copied to clipboard');\n          }).catch(err => {\n            console.error('Failed to copy: ', err);\n          });\n        } else {\n          const textArea = document.createElement('textarea');\n          textArea.value = text;\n          document.body.appendChild(textArea);\n          textArea.focus();\n          textArea.select();\n          try {\n            document.execCommand('copy');\n            alert('Copied to clipboard');\n          } catch (err) {\n            console.error('Failed to copy: ', err);\n          }\n          document.body.removeChild(textArea);\n        }\n      }\n    </script>\n  </head>\n  <body>\n    <div class=\"table-container\">\n      <table class=\"table table-striped table-hover\">\n        <thead class=\"thead-dark\">\n          <tr>\n            <th><div class=\"type-format\"><img src=\"https://cdn.statically.io/gh/Automations-Project/popular-brands-icons-colored/main/icons/rss.min.svg\" class=\"icon\"> Type</div></th>\n            <th><div class=\"type-format\"><img src=\"https://cdn.statically.io/gh/simple-icons/simple-icons/develop/icons/rss.min.svg\" class=\"icon\"> Format</div></th>\n            <th><div class=\"type-format\"><img src=\"https://cdn.statically.io/gh/Automations-Project/popular-brands-icons-colored/main/icons/curl.min.svg\" class=\"icon\"> URL</div></th>\n          </tr>\n        </thead>\n        <tbody>`;\n\n// Function to process each item and add it to the HTML table\nObject.entries(inputData).forEach(([key, value]) => {\n  // Extract type and format from the key, assuming key format 'Category - Format'\n  const [type, format] = key.split(' - ');\n  html += `<tr>\n    <td class=\"xtd\"><div class=\"type-format\">${type} RSS</div></td>\n    <td class=\"xtd\"><div class=\"type-format\"> ${format}</div></td>\n    <td class=\"xtd\"><span class=\"url-box\" onclick=\"copyToClipboard('${value}')\">${value}</span></td>\n  </tr>`;\n});\n\n// Close the HTML table tag\nhtml += `</tbody></table></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\" async></script>\n  </body>\n</html>`;\n\n// Return the HTML string as output\nreturn [{json: {html: html}}];\n"},"name":"Format response as HTML Table","type":"n8n-nodes-base.code","typeVersion":2,"position":[1680,-280]},{"parameters":{"mode":"combine","combinationMode":"multiplex","options":{}},"name":"Merga Data of Youtube & Community RSS","type":"n8n-nodes-base.merge","typeVersion":2.1,"position":[1480,-280]}],"connections":{"n8n Form Trigger":{"main":[[{"node":"Validation Code","type":"main","index":0}]]},"Get Channel ID":{"main":[[{"node":"Set XML URL","type":"main","index":0}]]},"Set XML URL":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Set Channel Username":{"main":[[{"node":"Get Channel ID","type":"main","index":0}]]},"Set XML Feed URL":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Set Video ID":{"main":[[{"node":"Get Video ID Channel ID","type":"main","index":0}]]},"Get Video ID Channel ID":{"main":[[{"node":"Set XML Feed","type":"main","index":0}]]},"Set XML Feed":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Get Temporary Token":{"main":[[{"node":"Set Channel Username","type":"main","index":0}]]},"GTT":{"main":[[{"node":"Set Video ID","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Youtube Channel Community RSS Formats","type":"main","index":0},{"node":"Youtube Channel Videos RSS Formats","type":"main","index":0}]]},"Youtube Channel Community RSS Formats":{"main":[[{"node":"Merga Data of Youtube & Community RSS","type":"main","index":0}]]},"Youtube Channel Videos RSS Formats":{"main":[[{"node":"Merga Data of Youtube & Community RSS","type":"main","index":1}]]},"Switch":{"main":[[{"node":"Get Temporary Token","type":"main","index":0}],[{"node":"Set XML Feed URL","type":"main","index":0}],[{"node":"GTT","type":"main","index":0}]]},"Validation Code":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Format response as HTML Table":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]},"Merga Data of Youtube & Community RSS":{"main":[[{"node":"Format response as HTML Table","type":"main","index":0}]]}},"active":"false","settings":{"executionOrder":"v1","timezone":"Asia/Baghdad","saveExecutionProgress":true,"saveManualExecutions":true,"callerPolicy":"workflowsFromSameOwner","executionTimeout":600,"errorWorkflow":""},"staticData":"","pinData":{},"meta":{"templateCredsSetupCompleted":false},"tags":[{"createdAt":"2024-05-29T13:48:48.264Z","updatedAt":"2024-05-29T13:48:48.264Z","id":"Q29tbWVudHBpY2tlcg","name":"Commentpicker"},{"createdAt":"2024-05-29T13:48:48.265Z","updatedAt":"2024-05-29T13:48:48.265Z","id":"Rm9ybVRyaWdnZXI","name":"FormTrigger"},{"createdAt":"2024-05-29T13:48:48.265Z","updatedAt":"2024-05-29T13:48:48.265Z","id":"SHR0cFJlcXVlc3Q","name":"HttpRequest"},{"createdAt":"2024-05-29T13:48:48.265Z","updatedAt":"2024-05-29T13:48:48.265Z","id":"QWdncmVnYXRl","name":"Aggregate"},{"createdAt":"2024-05-29T13:48:48.265Z","updatedAt":"2024-05-29T13:48:48.265Z","id":"UmVzcG9uZFRvV2ViaG9vaw","name":"RespondToWebhook"},{"createdAt":"2024-05-29T13:48:48.265Z","updatedAt":"2024-05-29T13:48:48.265Z","id":"Q29kZQ","name":"Code"}]}